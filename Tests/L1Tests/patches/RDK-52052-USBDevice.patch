commit b83f3d7bd89b219b215463334d110bae632be2ca
Author: Siva Thandayuthapani <sithanda@synamedia.com>
Date:   Sat Sep 28 00:20:22 2024 +0530

    RDK-52052 L1 usbdevice patches

diff --git a/interfaces/IUSBDevice.h b/interfaces/IUSBDevice.h
new file mode 100755
index 0000000..c94efe4
--- /dev/null
+++ b/interfaces/IUSBDevice.h
@@ -0,0 +1,134 @@
+/*
+ * If not stated otherwise in this file or this component's LICENSE file the
+ * following copyright and licenses apply:
+ *
+ * Copyright 2024 RDK Management
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * https://urldefense.com/v3/__http://www.apache.org/licenses/LICENSE-2.0__;!!CQl3mcHX2A!AIsdoV9RmJiZ-kCiJ9jXDf3DLnAMym8wdLb8gsUImxAgKS0zfqaIaTfDxhK13YAXmnDoeM2e2EwiMuldtIvjMfPJ1qBfEQpl$ 
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#pragma once
+ 
+#include "Module.h"
+
+// @stubgen:include <com/IIteratorType.h>
+ 
+namespace WPEFramework {
+namespace Exchange {
+// @json @text:keep
+struct EXTERNAL IUSBDevice : virtual public Core::IUnknown {
+  enum { ID = ID_USB_DEVICE };
+
+  struct USBDevice { 
+    uint8_t  deviceClass    /* @brief USB class of the device as per USB specificiation */ ;
+    uint8_t  deviceSubclass /* @brief USB sub class of the device as per USB specificiation */;
+    string   deviceName     /* @brief Name of the USB device */;
+    string   devicePath     /* @brief the path to be used for the USB device ex: /dev/sdX */;
+  };
+  using IUSBDeviceIterator = RPC::IIteratorType<USBDevice, ID_USB_DEVICE_ITERATOR>;
+  // @event 
+  struct EXTERNAL INotification : virtual public Core::IUnknown {
+    enum { ID = ID_USB_DEVICE_NOTIFICATION };
+ 
+    // @brief Device Plugged in notification
+    // @text onDevicePluggedIn
+    // @param USBDevice: USB information of the plugged in device
+    virtual void OnDevicePluggedIn(const USBDevice &device) = 0;
+
+    // @brief Device Plugged out notification
+    // @text onDevicePluggedOut
+    // @param USBDevice: USB information of the plugged in device
+    virtual void OnDevicePluggedOut(const USBDevice &device) = 0;
+
+  };
+
+  /** Register notification interface */
+  virtual uint32_t Register(Exchange::IUSBDevice::INotification *notification) = 0;
+  /** Unregister notification interface */
+  virtual uint32_t Unregister(Exchange::IUSBDevice::INotification *notification) = 0;
+
+  struct USBProductInfo {
+          uint16_t languageId   /* @brief language id present on the device */;
+          string  serialNumber  /* @brief unicode string representing the serial number of the device */;
+          string  manufacturer  /* @brief unicode string representing the manufacturer of the device */;
+          string  product       /* @brief unicode string representing the product */;
+  };
+  using IUSBProductInfoIterator = RPC::IIteratorType<USBProductInfo, ID_USB_PRODUCT_INFO_ITERATOR>;
+  
+  enum USBDeviceSpeed : uint8_t {
+            DEVICE_SPEED_LOW     = 1  /* @text Low */,
+            DEVICE_SPEED_FULL    = 2  /* @text Full */,
+            DEVICE_SPEED_HIGH    = 3  /* @text High */,
+            DEVICE_SPEED_SUPER   = 4  /* @text Super */
+        };
+  
+  enum USBDeviceFlags : uint8_t {
+            DEVICE_FLAGS_DRIVER_AVAILABLE = 1  /* @text AVAILABLE */,
+            DEVICE_FLAGS_SWITCHABLE       = 2  /* @text SWITCHABLE */
+        };
+  
+  enum USBDeviceStatus : uint8_t {
+            DEVICE_STATUS_ACTIVE                = 1  /* @text Active */,
+            DEVICE_STATUS_NO_DEVICE_CONNECTED   = 2  /* @text NoDeviceConnected*/,
+            DEVICE_STATUS_SELF_POWERED          = 4  /* @text SelfPowered */
+        };
+
+  struct USBDeviceInfo {
+            uint32_t         parentId       /* @brief Parent Node ID of the device */;
+            uint8_t          deviceStatus   /* @bitmask current device status */;
+            uint8_t          deviceLevel    /* @brief device level */;
+            uint8_t          portNumber     /* @brief port number of USB on which the device is attached */;
+            uint16_t         vendorId       /* @brief Vendor ID of the device */;
+            uint16_t         productId      /* @brief Product ID of the device */;
+            uint8_t          protocol       /* @brief Protocol supported by the device */;
+            string           serialNumber   /* @brief Serial number of the device */;
+            USBDevice	     device     	/* @brief Basic device information included */;
+            USBDeviceFlags   flags          /* @brief Flags of the device */;
+            uint32_t         features       /* @brief Features supported by the device - reserved */;
+            USBDeviceSpeed   busSpeed       /* @brief Speed of the device */;
+            uint8_t          numLanguageIds /* @brief number of language ids present on the device */;
+            USBProductInfo productInfo1 /* @brief product 1 info present on the device */;
+            USBProductInfo productInfo2 /* @brief product 2 info present on the device */;
+            USBProductInfo productInfo3 /* @brief product 3 info present on the device */;
+            USBProductInfo productInfo4 /* @brief product 4 info present on the device */;
+        };
+  using IUSBDeviceInfoIterator = RPC::IIteratorType<USBDeviceInfo, ID_USB_DEVICE_INFO_ITERATOR>;
+  
+  /** Gets the device information of the connected USB Devices.*/
+  // @text getDeviceList
+  // @brief Get the basic information about list of devices connected with the system.
+  // @param devices : List of USB devices along with basic info.
+  virtual uint32_t GetDeviceList(IUSBDeviceIterator*& devices /* @out */ ) const = 0;
+
+  /** Gets detailed device information for the given device name */
+  // @text getDeviceInfo
+  // @brief Get the extended USB device information for the provided device name
+  // @param deviceName: device name
+  // @param deviceInfo: Detailed device information
+  virtual uint32_t GetDeviceInfo(const string &deviceName /* @in @text deviceName */, IUSBDeviceInfoIterator*& deviceInfo /* @out */) const = 0;
+
+  /** Binds the respective driver for the device */
+  // @text bindDriver
+  // @brief Bind the respective driver for the device */
+  // @param deviceName: Name of the device
+  virtual uint32_t BindDriver(const string &deviceName /* @in @text deviceName */) const = 0;
+
+  /** Unbinds the respective driver for the device */
+  // @text unbindDriver
+  // @brief Unbind the respective driver for the device */
+  // @param deviceName: Name of the device
+  virtual uint32_t UnbindDriver(const string &deviceName /* @in @text deviceName */) const = 0;
+};
+ 
+} // namespace Exchange
+} // namespace WPEFramework
diff --git a/interfaces/Ids.h b/interfaces/Ids.h
index f53e999..8a36312 100644
--- a/interfaces/Ids.h
+++ b/interfaces/Ids.h
@@ -357,12 +357,17 @@ namespace Exchange {
         ID_TEXT_TO_SPEECH                            = RPC::IDS::ID_EXTERNAL_INTERFACE_OFFSET + 0x4C0,
         ID_TEXT_TO_SPEECH_NOTIFICATION               = ID_TEXT_TO_SPEECH + 1,
 
-	ID_ANALYTICS                                 = RPC::IDS::ID_EXTERNAL_INTERFACE_OFFSET + 0x4D0,
+	    ID_ANALYTICS                                 = RPC::IDS::ID_EXTERNAL_INTERFACE_OFFSET + 0x4D0,
+
+        ID_USB_DEVICE                                = RPC::IDS::ID_EXTERNAL_INTERFACE_OFFSET + 0x4E0,
+        ID_USB_DEVICE_NOTIFICATION                   = ID_USB_DEVICE + 1,
+        ID_USB_DEVICE_ITERATOR                       = ID_USB_DEVICE + 2,
+        ID_USB_PRODUCT_INFO_ITERATOR                 = ID_USB_DEVICE + 3,
+        ID_USB_DEVICE_INFO_ITERATOR                  = ID_USB_DEVICE + 4,
 
         ID_XCAST                                     = RPC::IDS::ID_EXTERNAL_INTERFACE_OFFSET + 0x4F0,
         ID_XCAST_NOTIFICATION                        = ID_XCAST + 1,
         ID_XCAST_APPLICATION_INFO_ITERATOR           = ID_XCAST + 2,
-
     };
 }
 }
